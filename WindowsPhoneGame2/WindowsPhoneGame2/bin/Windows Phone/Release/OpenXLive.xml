<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenXLive</name>
    </assembly>
    <members>
        <member name="T:OpenXLive.Features.Achievement">
            <summary>
            Describes a single achievement, including the achievement name, description, image, and point. 
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Achievement.#ctor(OpenXLive.Features.GameSession,System.String)">
            <summary>
            Create a Achievement instance
            </summary>
            <param name="session">The instance of game session</param>
            <param name="AchievementKey">Achievement Key</param>
        </member>
        <member name="M:OpenXLive.Features.Achievement.Award">
            <summary>
            Award the achievement
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Achievement.Award(System.String,OpenXLive.Features.LeaderboardProfile,System.String)">
            <summary>
            Award the achievement
            </summary>
            <param name="score">The score submit with achievement</param>
            <param name="leaderboard">The leaderboard of score submit to</param>
            <param name="comments">Comments the achievement</param>
        </member>
        <member name="M:OpenXLive.Features.Achievement.GetProfile">
            <summary>
            Get the profile of Achievement
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Achievement.GetProfile(OpenXLive.Features.GameSession)">
            <summary>
            Get the profile of Achievement
            </summary>
            <param name="session">The game session</param>
        </member>
        <member name="M:OpenXLive.Features.Achievement.GetProfile(OpenXLive.Features.Player)">
            <summary>
            Get the profile of Achievement
            </summary>
            <param name="player">The player of award Achievement</param>
        </member>
        <member name="P:OpenXLive.Features.Achievement.ID">
            <summary>
            Gets or sets a achievement ID
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Name">
            <summary>
            Gets or sets a achievement name
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.GameId">
            <summary>
            Gets or sets the game Id.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.GameName">
            <summary>
            Gets or sets the game name.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Description">
            <summary>
            Gets or sets a achievement description
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.HowTo">
            <summary>
            Gets or sets the description of how to get achievement 
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Point">
            <summary>
            Gets or sets the point of achievement
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Image">
            <summary>
            Gets or sets the image of achievement
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.ImageUrl">
            <summary>
            Gets or sets the image uro of achievement.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.IsSecret">
            <summary>
            Gets whether or not the achievement is secret.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.IsEarned">
            <summary>
            Gets whether or not the achievement has been earned.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Session">
            <summary>
            Gets the instance of current game session
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Player">
            <summary>
            Gets the instance of current player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.IsSubmit">
            <summary>
            Gets whether or not the achievement has been submit.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.AchievementKey">
            <summary>
            Gets or sets the achievement's key
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.IsOnline">
            <summary>
            Gets whether or not the achievement is earned online
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Time">
            <summary>
            Gets the time of achievement has been earned
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Score">
            <summary>
            Gets or Sets Submit the score with achievement
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.LeaderboardId">
            <summary>
            Gets the leaderboard id that the scores submit.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Comments">
            <summary>
            Gets or Sets Comments the achievement
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.Friends">
            <summary>
            Gets the collection of friends who obatained this achievement.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Achievement.ObtainedPlayerNumber">
            <summary>
            Gets or sets the number of the players who obtained this achievement.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.Achievement.AwardCompleted">
            <summary>
            AwardCompleted event
            </summary>
        </member>
        <member name="E:OpenXLive.Features.Achievement.GetProfileCompleted">
            <summary>
            GetProfileCompleted event
            </summary>
        </member>
        <member name="T:OpenXLive.Features.Badge">
            <summary>
            Represents a badge of a player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Badge.Name">
            <summary>
            Gets or sets the name of a badge.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Badge.Description">
            <summary>
            Gets or sets the description of a badge.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Badge.ImageUrl">
            <summary>
            Badge thumbnail Image
            </summary>
        </member>
        <member name="T:OpenXLive.Features.GameCategory">
            <summary>
            Game category
            </summary>
        </member>
        <member name="P:OpenXLive.Features.IPaging.Offset">
            <summary>
            Gets the Offset of the last request, default is 0.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.IPaging.Size">
            <summary>
            Gets the size of the last request, default is 30,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.IPaging.CanNext">
            <summary>
            Gets a value that indicates whether have remaining data.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameSearch.Search(System.String)">
            <summary>
            Search game with specifies keyword.
            </summary>
            <param name="keyword">keyword.</param>
            <exception cref="T:System.ArgumentNullException">keyword is null</exception>
            <exception cref="T:System.ArgumentException">keyword is an empty string.</exception>
        </member>
        <member name="M:OpenXLive.Features.GameSearch.Search(System.String,System.Int32,System.Int32)">
            <summary>
            Search game with specifies keyword.
            </summary>
            <param name="keyword">keyword.</param>
            <exception cref="T:System.ArgumentNullException">keyword is null</exception>
            <exception cref="T:System.ArgumentException">keyword is an empty string.</exception>
        </member>
        <member name="M:OpenXLive.Features.GameSearch.GetGameList(System.String,System.String,System.String)">
            <summary>
            Search to get Game List of the first 30 data with specified conditions.
            </summary>
            <param name="CategoryID">Category ID</param>
            <param name="Sort">Sort string, like hot</param>
            <param name="Tag">Keyword</param>
        </member>
        <member name="M:OpenXLive.Features.GameSearch.GetGameList(OpenXLive.Features.GameType,System.String,System.String,System.String)">
            <summary>
            Search to get Game List of the first 30 data with specified conditions.
            </summary>
            <param name="type"></param>
            <param name="CategoryID"></param>
            <param name="Sort"></param>
            <param name="Tag"></param>
        </member>
        <member name="M:OpenXLive.Features.GameSearch.GetGameList(OpenXLive.Features.GameType,System.String,System.String,System.String,OpenXLive.Features.PublishStatus)">
            <summary>
            Search to get Game List of the first 30 data with specified conditions.
            </summary>
            <param name="type"></param>
            <param name="CategoryID"></param>
            <param name="Sort"></param>
            <param name="Tag"></param>
            <param name="publish"></param>
        </member>
        <member name="M:OpenXLive.Features.GameSearch.GetGameList(OpenXLive.Features.GameType,System.String,System.String,System.String,OpenXLive.Features.PublishStatus,System.Int32,System.Int32)">
            <summary>
            Search to get Game List with the specified offset and size.
            </summary>
            <param name="type"></param>
            <param name="CategoryID">Category ID</param>
            <param name="Sort">Sort string, like hot</param>
            <param name="Tag">Keyword</param>
            <param name="publish"></param>
            <param name="offset">The offset of the request</param>
            <param name="page_Size">The size of the request</param>
        </member>
        <member name="M:OpenXLive.Features.GameSearch.GetGameCategories">
            <summary>
            Gets all the game category
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameSearch.GetGamesOnDevice">
            <summary>
            Gets all the games in the current device.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.GameSearch.SearchCompleted">
            <summary>
            Occurs when search game completed.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.GameSearch.GetGamesOnDeviceCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSearch.GameList">
            <summary>
            The game list of game session
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSearch.GameCategories">
            <summary>
            The game category list
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSearch.Offset">
            <summary>
            Gets the Offset of the last request, default is 0.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSearch.Size">
            <summary>
            Gets the size of the last request, default is 30,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSearch.CanNext">
            <summary>
            Gets a value that indicates whether have remaining data.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.Medal">
            <summary>
            Represents a Medal of a player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Medal.Name">
            <summary>
            Gets the name of a Medal.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Medal.MemberId">
            <summary>
            Gets the player id who obtained this medal.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Medal.Points">
            <summary>
            Gets the points needed when obtain the medal.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Medal.ImageUrl">
            <summary>
            Medal thumbnail Image url,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Medal.Description">
            <summary>
            Gets the description of a Medal.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Medal.ObtainedTime">
            <summary>
            Gets the obtained time of a Medal.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Medal.Level">
            <summary>
            Gets the level of a medal.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.MessageThread.#ctor(OpenXLive.Features.MyPlayer,OpenXLive.Features.Player)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="toPlayer"></param>
            <exception cref="T:System.ArgumentNullException">owner or toPlayer is null.</exception>
        </member>
        <member name="M:OpenXLive.Features.MessageThread.GetMessages(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="page_Size"></param>
            <exception cref="T:System.ArgumentException">offset or page_Size is less than zero.</exception>
        </member>
        <member name="P:OpenXLive.Features.MessageThread.Offset">
            <summary>
            Gets the Offset of the last request, default is 0.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MessageThread.Size">
            <summary>
            Gets the size of the last request, default is 30,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MessageThread.CanNext">
            <summary>
            Gets a value that indicates whether have remaining data.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.XGame.GetProfile">
            <summary>
            Get the Profile of game
            </summary>
        </member>
        <member name="P:OpenXLive.Features.XGame.GameID">
            <summary>
            Gets or sets the game ID
            </summary>
        </member>
        <member name="P:OpenXLive.Features.XGame.Profile">
            <summary>
            Game Profile
            </summary>
        </member>
        <member name="P:OpenXLive.Features.XGame.CurrentPlaying">
            <summary>
            Gets the collecion of friends who is playing this game.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.MyGame.Promote">
            <summary>
            Promote the game.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyGame.Name">
            <summary>
            Game name
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyGame.Description">
            <summary>
            Game Description
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyGame.Developer">
            <summary>
            Developer name
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyGame.UserRating">
            <summary>
            User Rating, 1~5
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyGame.MarketplaceId">
            <summary>
            The ID of Marketplace
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyGame.Image">
            <summary>
            Game thumbnail Image
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyGame.LastAccessTime">
            <summary>
            Gets or sets the last access time.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.GameAchievement">
            <summary>
            Describes the achievement list of game
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameAchievement.GetAchievements">
            <summary>
            Gets Achievements list.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameAchievement.GetAchievements(System.Int32,System.Int32)">
            <summary>
            Gets Achievements list with specified offset and size.
            </summary>
            <param name="offset">The offset of the request</param>
            <param name="page_Size">The size of the request</param>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.Session">
            <summary>
            Gets the current game session
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.GameID">
            <summary>
            Gets the current game ID
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.GameName">
            <summary>
            Gets the current game name
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.AwardCount">
            <summary>
            Gets the point count of current player has been award
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.TotalCount">
            <summary>
            Gets the total point count of game 
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.Owner">
            <summary>
            Gets the owner of game achievement list
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.Image">
            <summary>
            Gets the game icon
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.Achievements">
            <summary>
            Gets the achievements list of game session, need to call GetAchievements method first
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.Offset">
            <summary>
            Gets the Offset of the last request, default is 0.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.Size">
            <summary>
            Gets the size of the last request, default is 30,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameAchievement.CanNext">
            <summary>
            Gets a value that indicates whether have remaining data.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.GameProfile">
            <summary>
            Game profile
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.ID">
            <summary>
            Game ID, GUID
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Name">
            <summary>
            Game name
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Description">
            <summary>
            Game Description
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Summary">
            <summary>
            Game summary
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Developer">
            <summary>
            Developer name
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.DeveloperId">
            <summary>
            Developer id.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Email">
            <summary>
            Developer Email
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Price">
            <summary>
            Software price, USD
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Currency">
            <summary>
            Currency.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Category">
            <summary>
            Game Category, like FPS, RPG
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.OpenXLiveVersion">
            <summary>
            OpenXlive Version
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.MarketPlaceVersion">
            <summary>
            MarketPlace Version.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Released">
            <summary>
            Released date
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.SupportDevices">
            <summary>
            Support Devices, XBox 360, WP7, Windows
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.GameRating">
            <summary>
            Game Rating
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.OpenXLiveFeature">
            <summary>
            Support Open XLive Feature
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.URL">
            <summary>
            Game Home page URL
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.ImageUrl">
            <summary>
            Gets or sets the url of image.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.PromotionIcon">
            <summary>
            Gets the widescreen icon of a game.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.UserRating">
            <summary>
            User Rating, 1~5
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.DownloadNumber">
            <summary>
            Total Download Number
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.OnlineDeviceNumber">
            <summary>
            Online Device Number
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.MarketplaceId">
            <summary>
            The ID of Marketplace
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.HighestScore">
            <summary>
            Gets the highest score in the game for a player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.AchievementsCount">
            <summary>
            Gets the number of achievements about the game.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameProfile.ObtainedAchievementsCount">
            <summary>
            Gets the number of obtained achievements for a player. 
            </summary>
        </member>
        <member name="T:OpenXLive.Features.GameRating">
            <summary>
            Game Ratings, follow ESRB standard
            </summary>
        </member>
        <member name="F:OpenXLive.Features.GameRating.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OpenXLive.Features.GameRating.eC">
            <summary>
            Early Childhood
            </summary>
        </member>
        <member name="F:OpenXLive.Features.GameRating.E">
            <summary>
            Everyone
            </summary>
        </member>
        <member name="F:OpenXLive.Features.GameRating.E10">
            <summary>
            Everyone 10 and older
            </summary>
        </member>
        <member name="F:OpenXLive.Features.GameRating.T">
            <summary>
            Teen
            </summary>
        </member>
        <member name="F:OpenXLive.Features.GameRating.M">
            <summary>
            Mature (17+)
            </summary>
        </member>
        <member name="F:OpenXLive.Features.GameRating.AO">
            <summary>
            Adults Only (18+)
            </summary>
        </member>
        <member name="F:OpenXLive.Features.GameRating.RP">
            <summary>
            Rating Pending
            </summary>
        </member>
        <member name="T:OpenXLive.Features.GameSession">
            <summary>
            The instance of Game Session, Game Session one user play a game once. 
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameSession.Open">
            <summary>
            Open the Game Session.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameSession.Close">
            <summary>
            Close the Game Session.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameSession.Query">
            <summary>
            Query game session
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameSession.GetLeaderboardIdentity">
            <summary>
            Get the Leaderboard Identity of game session
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameSession.GetOnlinePlayers">
            <summary>
            Get Online Players
            </summary>
        </member>
        <member name="M:OpenXLive.Features.GameSession.GetOnlinePlayers(System.Int32,System.Int32)">
            <summary>
            Gets online players.
            </summary>
            <param name="offset"></param>
            <param name="page_Size"></param>
            <exception cref="T:System.ArgumentException">offset or page_Size is less than zero.</exception>
        </member>
        <member name="M:OpenXLive.Features.GameSession.RegisterNotificationUri(System.Uri)">
            <summary>
            Register a Push Notification channel on OpenXLive's server
            </summary>
            <param name="channelUri">The channel Uri that get from Push Notification API</param>
        </member>
        <member name="M:OpenXLive.Features.GameSession.GetSocialProviders">
            <summary>
            get sns list
            </summary>
        </member>
        <member name="E:OpenXLive.Features.GameSession.GetSocialProvidersCompleted">
            <summary>
            Occurs when get the social provider list completed
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.IsOpening">
            <summary>
            Gets a value indicates whether is opening game session.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.HasInvokeOpenMethod">
            <summary>
            Gets a value indicates whether have invoked open method before.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.ID">
            <summary>
            Gets or sets the game session ID
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.CurrentPlayer">
            <summary>
            Gets or sets the current player of game session
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.Owner">
            <summary>
            Gets or sets the owner of game session
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.AnonymousID">
            <summary>
            Gets the Anonymous ID of device and player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.IsValid">
            <summary>
            Gets whether the game session has been created on OpenXLive server
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.States">
            <summary>
            Gets the states of Game Session
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.TimeOut">
            <summary>
            Gets the value of Time Out, unit is millisecond 
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.LeaderboardProfiles">
            <summary>
            Gets the leaderboard list of game, must call GameSession.GetLeaderboardIdentity method first.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.Achievements">
            <summary>
            The Achievements list of game session
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.OnlinePlayers">
            <summary>
            The Online player list of game session, must call GameSession.GetOnlinePlayers method first.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.SNSProviders">
            <summary>
            Gets sns provider list
            </summary>
        </member>
        <member name="P:OpenXLive.Features.GameSession.IsLoginSameDevice">
            <summary>
            Gets a value that indicate whether use the same account on the same device.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Leaderboard.GetHighScores">
            <summary>
            Gets high scores .
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Leaderboard.GetHighScores(OpenXLive.Features.ScoreTimeRange,System.Int32,System.Int32)">
            <summary>
            Gets high scroes with specified conditions
            </summary>
            <param name="timeRange"></param>
            <param name="offset">The offset of the request</param>
            <param name="pageSize">The size of the request</param>
        </member>
        <member name="M:OpenXLive.Features.Leaderboard.GetHighScores(OpenXLive.Features.ScoreTimeRange,System.Nullable{OpenXLive.Service.SortType},System.Int32,System.Int32)">
            <summary>
            Gets high scroes with specified conditions
            </summary>
            <param name="timeRange"></param>
            <param name="sortType"></param>
            <param name="offset">The offset of the request</param>
            <param name="pageSize">The size of the request</param>
        </member>
        <member name="M:OpenXLive.Features.Leaderboard.GetFriendsScores">
            <summary>
            Gets frieds scores of current player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Leaderboard.MyScore">
            <summary>
            Gets the high score for current player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Leaderboard.Offset">
            <summary>
            Gets the Offset of the last request, default is 0.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Leaderboard.Size">
            <summary>
            Gets the size of the last request, default is 30,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Leaderboard.CanNext">
            <summary>
            Gets a value that indicates whether have remaining data.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.LeaderboardProfile.ImageUrl">
            <summary>
            Gets or sets the image url.
            </summary>
        </member>
        <member name="F:OpenXLive.Features.PlayerType.Anonymous">
            <summary>
            not logged in
            </summary>
        </member>
        <member name="F:OpenXLive.Features.PlayerType.Normal">
            <summary>
            logged in with OpenXLive account
            </summary>
        </member>
        <member name="F:OpenXLive.Features.PlayerType.Social">
            <summary>
            logged in with other social network account
            </summary>
        </member>
        <member name="T:OpenXLive.Features.Player">
            <summary>
            The player object's abstract class
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Player.GetMyScores(System.String)">
            <summary>
            Gets my scores.
            </summary>
            <param name="gameId">Game id.</param>
            <exception cref="T:System.ArgumentNullException">gameId is null.</exception>
            <exception cref="T:System.ArgumentException">gameId is an empty string.</exception>
        </member>
        <member name="M:OpenXLive.Features.Player.GetMyGames(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="page_Size"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:OpenXLive.Features.Player.GetMyFriends">
            <summary>
            Gets friends list of the player.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Player.GetMyFriends(System.Int32,System.Int32)">
            <summary>
            Gets friends list of the player.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Player.GetMyFollowers">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Player.GetMyFollowers(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Player.GetMyFollowings">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Player.GetMyFollowings(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.ID">
            <summary>
            Gets or sets the player's ID
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.AccountName">
            <summary>
            Gets or sets the player's Account Name, like xxx@openxlive.com
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.Title">
            <summary>
            Gets or sets the player's Title Name
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.Photo">
            <summary>
            Gets or sets the player's photo
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.PhotoUrl">
            <summary>
            Gets or sets the photo url of a player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.OnlineStates">
            <summary>
            Gets or sets the player's states
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.FollowState">
            <summary>
            Gets or sets the player's FollowState with current player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.Profile">
            <summary>
            Gets or sets the player's Profile
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.MyGames">
            <summary>
            Gets the game list of player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.MyScores">
            <summary>
            Gets the game score of player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.MyFirends">
            <summary>
            Gets the firends list of player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.MyFollowings">
            <summary>
            Gets the  followings list of player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.MyFollowers">
            <summary>
            Get the followers list of player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.ObtainedAchievements">
            <summary>
            Gets the achievement list of player award Achievements.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.Timeline">
            <summary>
            Gets the Timeline of  player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.Badges">
            <summary>
            Gets the collcetion of badges of a player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.Medals">
            <summary>
            Gets the collection of medals of a player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.Level">
            <summary>
            Gets the level information of a player.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Player.HighestScore">
            <summary>
            Gets the highest score in current the game.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.MyPlayer.Logon">
            <summary>
            Player logon to Open XLive system.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.MyPlayer.Logon(System.Boolean)">
            <summary>
            Player logon to Open XLive system.
            </summary>
            <param name="isLoginSameDevice">Whether use the same account on the same device.</param>
        </member>
        <member name="M:OpenXLive.Features.MyPlayer.Logon(System.String,System.String)">
            <summary>
            Player logon to Open XLive system.
            </summary>
            <param name="Account"></param>
            <param name="Password"></param>
        </member>
        <member name="M:OpenXLive.Features.MyPlayer.Logon(System.String,System.String,System.Boolean)">
            <summary>
            Player logon to Open XLive system.
            </summary>
            <param name="Account"></param>
            <param name="Password"></param>
            <param name="isLoginSameDevice">Whether use the same account on the same device.</param>
        </member>
        <member name="M:OpenXLive.Features.MyPlayer.SocialLogin(System.String)">
            <summary>
            SNS login
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:OpenXLive.Features.MyPlayer.AddSocialFollow(OpenXLive.Features.SNSProvider)">
            <summary>
            Add the offical account of specifies sns provier.
            </summary>
            <param name="provider"></param>
            <exception cref="T:System.NullReferenceException">provider is null.</exception>
        </member>
        <member name="M:OpenXLive.Features.MyPlayer.GetMessageThread(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="page_Size"></param>
        </member>
        <member name="P:OpenXLive.Features.MyPlayer.Type">
            <summary>
            gets the player type
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyPlayer.CurrentSession">
            <summary>
            Gets the game session belong player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyPlayer.PlayerTicket">
            <summary>
            Gets or sets the player's ID
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyPlayer.IsAnonymous">
            <summary>
            Gets whether Anonymous player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyPlayer.Password">
            <summary>
            Gets or sets the player's Password
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyPlayer.FeatureStates">
            <summary>
            Gets or sets the player's states
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyPlayer.MyLocation">
            <summary>
            Gets or sets the Location of player
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyPlayer.SocialLoginSucessToken">
            <summary>
            gets LoginToken 
            </summary>
        </member>
        <member name="P:OpenXLive.Features.MyPlayer.SNSContracts">
            <summary>
            Gets the sns contract list
            </summary>
        </member>
        <member name="E:OpenXLive.Features.MyPlayer.SocialLoginCompleted">
            <summary>
            Occures when sns login completed
            </summary>
        </member>
        <member name="M:OpenXLive.Features.XLiveStatus.Delete">
            <summary>
            Delete a status.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.XLiveStatus.DeleteComment(OpenXLive.Features.XLiveStatus)">
            <summary>
            Delete a comment.
            </summary>
            <param name="comment"></param>
            <exception cref="T:System.ArgumentNullException">comment is null.</exception>
        </member>
        <member name="P:OpenXLive.Features.XLiveStatus.IsDeleted">
            <summary>
            Gets or sets whether the status is deleted.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.XLiveStatus.Content">
            <summary>
            Gets the sharing content
            </summary>
        </member>
        <member name="P:OpenXLive.Features.XLiveStatus.Publisher">
            <summary>
            Ges whos publish this status
            </summary>
        </member>
        <member name="P:OpenXLive.Features.XLiveStatus.PictureUrl">
            <summary>
            Gets the unique ID
            </summary>
        </member>
        <member name="E:OpenXLive.Features.XLiveStatus.DeleteCompleted">
            <summary>
            Occurs when delete async operation completed.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.XLiveStatus.DeleteCommentCompleted">
            <summary>
            Occurs when delete comment async operation completed.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.MyStatus.UpdateStatus(System.String)">
            <summary>
            Share contnet
            </summary>
            <param name="content">must not be null or empty</param>
            <exception cref="T:System.ArgumentException">Thrown when content is null or empty,or snsProviderId is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when player is not logged in</exception>
        </member>
        <member name="M:OpenXLive.Features.MyStatus.UpdateStatus(System.String,System.Byte[])">
            <summary>
            Share content and picture
            </summary>
            <param name="content">must not be null or empty</param>
            <param name="picture">must not be null or an empty array</param>
            <exception cref="T:System.InvalidOperationException">Thrown when player is not logged in</exception>
            <exception cref="T:System.ArgumentException">Thrown when content is null or empty,or picture's lenght is 0,or snsProviderId is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when picture is null</exception>
        </member>
        <member name="E:OpenXLive.Features.MyStatus.UpdateStatusCompleted">
            <summary>
            Occurs when update status completed
            </summary>
        </member>
        <member name="T:OpenXLive.Features.NotificationState">
            <summary>
            Provides state for a notification item.
            </summary>
        </member>
        <member name="F:OpenXLive.Features.NotificationState.Unread">
            <summary>
            The notification has not been read.
            </summary>
        </member>
        <member name="F:OpenXLive.Features.NotificationState.Read">
            <summary>
            The notification has been read.
            </summary>
        </member>
        <member name="F:OpenXLive.Features.NotificationState.Close">
            <summary>
            The notification has been closed.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.NotificationItem">
            <summary>
            Provides a item in a notification.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.NotificationItem.Reset">
            <summary>
            Reset a notification item.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationItem.Id">
            <summary>
            Gets the unique identity of a notification.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationItem.MemberId">
            <summary>
            Gets the Id of the player who own this notification.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationItem.Name">
            <summary>
            Gets the name of a notification.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationItem.Title">
            <summary>
            Gets the title of a notification.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationItem.Arguments">
            <summary>
            Gets the arguments of a notification.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationItem.State">
            <summary>
            Gets the state of a notification.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationItem.Data">
            <summary>
            Gets the data of a notification.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationItem.Tag">
            <summary>
            Gets the additional information of a notification.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.NotificationItem.ResetCompleted">
            <summary>
            Occurs when reset async operation completed. 
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationPopup.Title">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationPopup.Notification">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.NotificationPopup.Images">
            <summary>
            Gets the images.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.Notification">
            <summary>
            Specifies a notification contains the count of messages, friends, following ect...
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Notification.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Notification.GetList">
            <summary>
            Gets the notifications.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Notification.List">
            <summary>
            Gets the item list.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.Notification.GetListCompleted">
            <summary>
            Occurs when get notification list completed.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.PlayerSearch">
            <summary>
            Provides method to search specifies player.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.PlayerSearch.#ctor(OpenXLive.Features.GameSession)">
            <summary>
            Initializes a new instance of PlayerSearch class.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:OpenXLive.Features.PlayerSearch.Search(System.String)">
            <summary>
            Search game with specifies keyword.
            </summary>
            <param name="keyword">keyword.</param>
            <exception cref="T:System.ArgumentNullException">keyword is null</exception>
            <exception cref="T:System.ArgumentException">keyword is an empty string.</exception>
        </member>
        <member name="M:OpenXLive.Features.PlayerSearch.Search(System.String,System.Int32,System.Int32)">
            <summary>
            Search game with specifies keyword.
            </summary>
            <param name="keyword">keyword.</param>
            <param name="offset"></param>
            <param name="page_Size"></param>
            <exception cref="T:System.ArgumentException">offset or page_Size is less than zero.</exception>
        </member>
        <member name="P:OpenXLive.Features.PlayerSearch.CurrentSession">
            <summary>
            Gets the current session.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.PlayerSearch.SearchCompleted">
            <summary>
            Occurs when search player completed.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PlayerSearch.PlayerList">
            <summary>
            The player list of the search result.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PlayerSearch.Offset">
            <summary>
            Gets the Offset of the last request, default is 0.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PlayerSearch.Size">
            <summary>
            Gets the size of the last request, default is 30,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PlayerSearch.CanNext">
            <summary>
            Gets a value that indicates whether have remaining data.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.Promotion">
            <summary>
            Provides promotion service.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Promotion.#ctor">
            <summary>
            Initilizes a new instance of <see cref="T:OpenXLive.Features.Promotion"/> class.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Promotion.GetItems">
            <summary>
            Gets promotion game collection.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Promotion.GetItems(System.Int32,System.Int32)">
            <summary>
            Gets promotion item collection.
            </summary>
            <param name="offset">The offset of the request</param>
            <param name="size">The size of the request</param>
            <exception cref="T:System.ArgumentException">offset is less than zero or size is less than zero.</exception>
        </member>
        <member name="M:OpenXLive.Features.Promotion.GetRewards">
            <summary>
            Gets promotion rewards that have not received.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Promotion.GetRewards(System.Int32,System.Int32)">
            <summary>
            Gets promotion rewards that have not received.
            </summary>
            <param name="offset">The offset of the request</param>
            <param name="size">The size of the request</param>
            <exception cref="T:System.ArgumentException">offset is less than zero or size is less than zero.</exception>
        </member>
        <member name="P:OpenXLive.Features.Promotion.Items">
            <summary>
            Gets the promotion game collection.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Promotion.Rewards">
            <summary>
            Gets the promotion rewards that the player have not received.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Promotion.Offset">
            <summary>
            Gets the Offset of the last request, default is 0.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Promotion.Size">
            <summary>
            Gets the size of the last request, default is 30,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Promotion.CanNext">
            <summary>
            Gets a value that indicates whether have remaining data.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.PromotionGame">
            <summary>
            Represents a game that will be promoted.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionGame.PromotionId">
            <summary>
            Gets the identifier assigned to the promotion item.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionGame.RewardId">
            <summary>
            Gets the reward id.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionGame.Method">
            <summary>
            Gets the reward way.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionGame.Amount">
            <summary>
            Gets the reward amount.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionGame.CreateTime">
            <summary>
            Gets the UTC creation time of reward.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionGame.IsReceived">
            <summary>
            Gets a value indicates whether the current player has received this reward.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionGame.Game">
            <summary>
            Gets the game that will be promoted.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.PromotionReward">
            <summary>
            Represents a reward when player promote a game.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.PromotionReward.Receive(OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Receive current promotion reward.
            </summary>
            <param name="callback">Method to be called once the asynchronous operation is finished.</param>
        </member>
        <member name="P:OpenXLive.Features.PromotionReward.Id">
            <summary>
            Gets the identifier assigned to the promotion reward.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionReward.RewardId">
            <summary>
            Gets the reward id.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionReward.DeviceId">
            <summary>
            Gets the device id.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionReward.IsReceived">
            <summary>
            Gets a value indicates whether the current player has received this reward.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionReward.Method">
            <summary>
            Gets the reward way.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.PromotionReward.Amount">
            <summary>
            Gets the reward amount.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:OpenXLive.Features.PromotionReward.CreateTime" -->
        <!-- Badly formed XML comment ignored for member "P:OpenXLive.Features.PromotionReward.ReceiveTime" -->
        <member name="P:OpenXLive.Features.Score.ImageUrl">
            <summary>
            Gets or sets the url of image.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.SNSContract">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenXLive.Features.SNSContract.MemberId">
            <summary>
            Gets the MemberId whose conncet to the provider
            </summary>
        </member>
        <member name="P:OpenXLive.Features.SNSContract.IsFollowable">
            <summary>
            Gets a value indicating whether the sns provider can able to follow.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.SNSContract.IsFollowed">
            <summary>
            Gets a value indicating whether the current player has followed the offical account.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.TaskState">
            <summary>
            Represents a state of a task.
            </summary>
        </member>
        <member name="F:OpenXLive.Features.TaskState.Activated">
            <summary>
            Task ia activated.
            </summary>
        </member>
        <member name="F:OpenXLive.Features.TaskState.Tracking">
            <summary>
            Task is tracking.
            </summary>
        </member>
        <member name="F:OpenXLive.Features.TaskState.Finished">
            <summary>
            Task has finished.
            </summary>
        </member>
        <member name="F:OpenXLive.Features.TaskState.Abandoned">
            <summary>
            Task has been Abandoned
            </summary>
        </member>
        <member name="F:OpenXLive.Features.TaskState.Failed">
            <summary>
            Failed.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TaskItem.Name">
            <summary>
            Gets the name of a task.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TaskItem.Title">
            <summary>
            Gets the title of a task.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TaskItem.Icon">
            <summary>
            Gets the icon of a task.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TaskItem.Description">
            <summary>
            Gets the description of a task.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TaskItem.MemberId">
            <summary>
            Gets the player id who accept this task.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TaskItem.State">
            <summary>
            Gets the state of a task.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TaskItem.DateTime">
            <summary>
            Gets the created time of a task.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TaskItem.Progress">
            <summary>
            Gets the progress of a task.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TaskItem.Arguments">
            <summary>
            Gets the arguments of a task.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.Task">
            <summary>
            Provides some method to get activated task, completed task, ect...
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Task.GetActivatedTask(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset">The offset of the request</param>
            <param name="page_Size">The size of the request</param>
            <exception cref="T:System.ArgumentException">offset or page_Size is less than zero.</exception>
        </member>
        <member name="M:OpenXLive.Features.Task.GetFinishedTask(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offset">The offset of the request</param>
            <param name="page_Size">The size of the request</param>
            <exception cref="T:System.ArgumentException">offset or page_Size is less than zero.</exception>
        </member>
        <member name="P:OpenXLive.Features.Task.ActivatedTask">
            <summary>
            Gets the activated task item list.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Task.FinishedTask">
            <summary>
            Gets the finished task item list.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.Task.GetActivatedTaskCompleted">
            <summary>
            Occurs when get activated task list completed.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.Task.GetFinishedTaskCompleted">
            <summary>
            Occurs when get finished task list completed.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Task.Offset">
            <summary>
            Gets the Offset of the last request, default is 0.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Task.Size">
            <summary>
            Gets the size of the last request, default is 30,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Task.CanNext">
            <summary>
            Gets a value that indicates whether have remaining data.
            </summary>
        </member>
        <member name="T:OpenXLive.Features.TimeSynchronization">
            <summary>
            Provides method to synchronization time.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.TimeSynchronization.#ctor">
            <summary>
            Initializes a new instance of the TimeSynchronization class.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.TimeSynchronization.GetUTCTime">
            <summary>
            synchronization the UTC time.
            </summary>
        </member>
        <member name="E:OpenXLive.Features.TimeSynchronization.GetUTCTimeCompleted">
            <summary>
            Occurs when get UTC time completed.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.TimeSynchronization.UTCTime">
            <summary>
            Gets the UTC time.
            </summary>
        </member>
        <member name="F:OpenXLive.LanguageSetting.English">
            <summary>
            en-Us
            </summary>
        </member>
        <member name="F:OpenXLive.LanguageSetting.SimplifiedChinese">
            <summary>
            zh-CN
            </summary>
        </member>
        <member name="M:OpenXLive.XLiveGameManager.RetryOpenSession">
            <summary>
            Retries to open game seesion when network is avilable.
            </summary>
        </member>
        <member name="M:OpenXLive.XLiveGameManager.Current_Deactivated(System.Object,Microsoft.Phone.Shell.DeactivatedEventArgs)">
            <summary>
            Handling for PhoneApplicationService.Deactivated event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OpenXLive.XLiveGameManager.Current_Activated(System.Object,Microsoft.Phone.Shell.ActivatedEventArgs)">
            <summary>
            Handling for PhoneApplicationService.Activated event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OpenXLive.XLiveGameManager.SyncTime(System.Action)">
            <summary>
            Sync time.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:OpenXLive.XLiveGameManager.GetUTCTime">
            <summary>
            Gets UTC time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.XLiveGameManager.Activated(Microsoft.Phone.Shell.ActivatedEventArgs)">
            <summary>
            Calls this method when the application is being made active after previously being put into a dormant state or tombstoned.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OpenXLive.XLiveGameManager.Deactivated">
            <summary>
            Calls this method when the application is being deactivated.
            </summary>
        </member>
        <member name="P:OpenXLive.XLiveGameManager.IsDiscardLocalScore">
            <summary>
            Gets or sets whether discard the local score and achievement that gets when network is invalid
            </summary>
        </member>
        <member name="P:OpenXLive.XLiveGameManager.GameVersion">
            <summary>
            Gets or sets the version of current game.
            </summary>
        </member>
        <member name="P:OpenXLive.XLiveGameManager.AutoDownloadImage">
            <summary>
            Gets or sets a valuet indicates whether download image automatically.
            </summary>
        </member>
        <member name="M:OpenXLive.Features.Timeline.#ctor(OpenXLive.Features.GameSession)">
            <summary>
            Initializes a new instance of XLiveSocial class using the specifies GameSession.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:OpenXLive.Features.Timeline.#ctor(OpenXLive.Features.Player)">
            <summary>
            Initializes a new instance of XLiveSocial class using the specifies player.
            </summary>
            <param name="player"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when player is null</exception>
        </member>
        <member name="P:OpenXLive.Features.Timeline.Category">
            <summary>
            Gets the current category of timeline.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Timeline.Offset">
            <summary>
            Gets the Offset of the last request, default is 0.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Timeline.Size">
            <summary>
            Gets the size of the last request, default is 30,
            </summary>
        </member>
        <member name="P:OpenXLive.Features.Timeline.CanNext">
            <summary>
            Gets a value that indicates whether have remaining data.
            </summary>
        </member>
        <member name="P:OpenXLive.Features.SNSProvider.Logo">
            <summary>
            Gets the logo url of the provider
            </summary>
        </member>
        <member name="P:OpenXLive.Features.SNSProvider.Url">
            <summary>
            Gets the home page url of the provider
            </summary>
        </member>
        <member name="F:OpenXLive.Features.StatusCategory.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenXLive.Features.StatusCategory.GameNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenXLive.Features.StatusCategory.GameAnnouncement">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenXLive.Features.StatusCategory.GlobalAnnouncement">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenXLive.Features.StatusCategory.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenXLive.Features.StatusType.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenXLive.Features.StatusType.GameNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenXLive.Features.StatusType.GameAnnouncement">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenXLive.Features.StatusType.GlobalAnnouncement">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenXLive.Service.AchievementService.GetProfile(OpenXLive.Features.Achievement)">
            <summary>
            Gets the profile of achievement
            </summary>
            <param name="achievement">Achievement instances</param>
        </member>
        <member name="M:OpenXLive.Service.AchievementService.GetProfile(OpenXLive.Features.Achievement,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Gets the profile of achievement
            </summary>
            <param name="achievement">Achievement instances</param>
            <param name="EventHandler">ProcessCompleted Event Handler</param>
        </member>
        <member name="M:OpenXLive.Service.AchievementService.Award(OpenXLive.Features.Achievement,OpenXLive.Features.GameSession)">
            <summary>
            Award achievement
            </summary>
            <param name="achievement">Achievement instances</param>
            <param name="session">Game session object</param>
        </member>
        <member name="M:OpenXLive.Service.AchievementService.Award(OpenXLive.Features.Achievement,OpenXLive.Features.GameSession,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Award achievement
            </summary>
            <param name="achievement">Achievement instances</param>
            <param name="session">Game session object</param>
            <param name="EventHandler">ProcessCompleted Event Handler</param>
        </member>
        <member name="M:OpenXLive.Service.AesEncryption.EncryptAES(System.String,System.String)">
            <summary>
            Encrypt specifies string with default key.
            </summary>
            <param name="plainText"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.AesEncryption.EncryptAES(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="plainText"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:OpenXLive.Service.RESTTransport">
            <summary>
            The transport channel use Http and RESTful service to access service.
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveTransport.Service">
            <summary>
            The Service instance of call the Transport object.
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveTransport.IsEncrypt">
            <summary>
            Gets or sets whether encrypt the Parameters.
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveTransport.IsSecureTransport">
            <summary>
            Gets or sets whether use Http SSL transport.True is via https, Flase is via http.
            </summary>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.DeleteStatus(OpenXLive.Features.XLiveStatus,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="status"></param>
            <param name="EventHandler"></param>
            <exception cref="T:System.ArgumentNullException">status is null.</exception>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.DeleteComemnt(OpenXLive.Features.XLiveStatus,OpenXLive.Features.XLiveStatus,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="comment"></param>
            <param name="EventHandler"></param>
            <exception cref="T:System.ArgumentNullException">owner or comment is null.</exception>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.AddFollow(OpenXLive.Features.MyPlayer,OpenXLive.Features.Player)">
            <summary>
            Add Follow Relationship
            </summary>
            <param name="owner"></param>
            <param name="FollowPlayer"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.AddFollow(OpenXLive.Features.MyPlayer,OpenXLive.Features.Player,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Add Follow Relationship
            </summary>
            <param name="owner"></param>
            <param name="FollowPlayer"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.RemoveFollow(OpenXLive.Features.MyPlayer,OpenXLive.Features.Player)">
            <summary>
            Remove Follow Relationship
            </summary>
            <param name="owner"></param>
            <param name="FollowPlayer"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.RemoveFollow(OpenXLive.Features.MyPlayer,OpenXLive.Features.Player,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Remove Follow Relationship
            </summary>
            <param name="owner"></param>
            <param name="FollowPlayer"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.ShowFollow(OpenXLive.Features.MyPlayer,OpenXLive.Features.Player,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Show Follow Relationship
            </summary>
            <param name="owner"></param>
            <param name="FollowPlayer"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.GetComments(OpenXLive.Features.XLiveStatus,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get a Comments list of a News.
            </summary>
            <param name="news"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.GetComments(OpenXLive.Features.XLiveStatus,System.Int32,System.Int32,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get a Comments list of a News.
            </summary>
            <param name="news"></param>
            <param name="offset"></param>
            <param name="page_Size"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.GetReposts(OpenXLive.Features.XLiveStatus,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get a Reposts list of a News.
            </summary>
            <param name="news"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.GetReposts(OpenXLive.Features.XLiveStatus,System.Int32,System.Int32,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get a Reposts list of a News.
            </summary>
            <param name="news"></param>
            <param name="offset"></param>
            <param name="page_Size"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.Repost(OpenXLive.Features.XLiveStatus,OpenXLive.Features.MyPlayer,System.String)">
            <summary>
            Repost a News.
            </summary>
            <param name="owner"></param>
            <param name="Text"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.Repost(OpenXLive.Features.XLiveStatus,OpenXLive.Features.MyPlayer,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Repost a News.
            </summary>
            <param name="owner"></param>
            <param name="Text"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.Repost(OpenXLive.Features.XLiveStatus,OpenXLive.Features.MyPlayer,System.String,System.String,OpenXLive.Features.XLocation)">
            <summary>
            Repost a News.
            </summary>
            <param name="owner"></param>
            <param name="Text"></param>
            <param name="GameId"></param>
            <param name="location"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.Repost(OpenXLive.Features.XLiveStatus,OpenXLive.Features.MyPlayer,System.String,System.String,OpenXLive.Features.XLocation,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Repost a News.
            </summary>
            <param name="owner"></param>
            <param name="Text"></param>
            <param name="GameId"></param>
            <param name="location"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.Comment(OpenXLive.Features.XLiveStatus,OpenXLive.Features.MyPlayer,System.String)">
            <summary>
            Comment a News.
            </summary>
            <param name="owner"></param>
            <param name="Text"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.Comment(OpenXLive.Features.XLiveStatus,OpenXLive.Features.MyPlayer,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Comment a News.
            </summary>
            <param name="owner"></param>
            <param name="Text"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.Comment(OpenXLive.Features.XLiveStatus,OpenXLive.Features.MyPlayer,System.String,System.String,OpenXLive.Features.XLocation)">
            <summary>
            Comment a News.
            </summary>
            <param name="owner"></param>
            <param name="Text"></param>
            <param name="GameId"></param>
            <param name="location"></param>
        </member>
        <member name="M:OpenXLive.Service.FriendsService.Comment(OpenXLive.Features.XLiveStatus,OpenXLive.Features.MyPlayer,System.String,System.String,OpenXLive.Features.XLocation,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Comment a News.
            </summary>
            <param name="owner"></param>
            <param name="Text"></param>
            <param name="GameId"></param>
            <param name="location"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.Search(OpenXLive.Features.GameSearch,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Seerch game with specifies keyword.
            </summary>
            <param name="search"></param>
            <param name="keyword">key word.</param>
            <param name="EventHandler"></param>
            <exception cref="T:System.NullReferenceException">search is null or Keyword is null.</exception>
            <exception cref="T:System.ArgumentException">The game session in the search is null or Keyword is an empty string.</exception>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetList(OpenXLive.Features.GameSearch,System.String,System.String,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Gets Game List
            </summary>
            <param name="search">The instance of Game Session</param>
            <param name="CategoryID">Category ID, like RPG</param>
            <param name="Sort">Sort string, like hot</param>
            <param name="Tag">Keyword</param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetProfile(OpenXLive.Features.GameSession,OpenXLive.Features.XGame)">
            <summary>
            Gets the profile of game session
            </summary>
            <param name="session"></param>
            <param name="game"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetProfile(OpenXLive.Features.GameSession,OpenXLive.Features.XGame,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Gets the profile of game session
            </summary>
            <param name="session"></param>
            <param name="game"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetLeaderboardIdentity(OpenXLive.Features.GameSession)">
            <summary>
            
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetLeaderboardIdentity(OpenXLive.Features.GameSession,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetAchievements(OpenXLive.Features.GameAchievement)">
            <summary>
            
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetAchievements(OpenXLive.Features.GameAchievement,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetAchievements(OpenXLive.Features.GameAchievement,System.String,OpenXLive.Features.Player,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="GameId"></param>
            <param name="player"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetOnlinePlayer(OpenXLive.Features.GameSession)">
            <summary>
            
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetOnlinePlayer(OpenXLive.Features.GameSession,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.GetOnlinePlayer(OpenXLive.Features.GameSession,System.Int32,System.Int32,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="offset"></param>
            <param name="page_Size"></param>
            <param name="eventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.GameService.ParseGameCategory(OpenXLive.Service.XLiveTransport,System.Object)">
            <summary>
            parse game category list
            </summary>
            <param name="Transport"></param>
            <param name="Target"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenXLive.Service.LeaderboardService.GetHighScores(OpenXLive.Features.Leaderboard)" -->
        <member name="M:OpenXLive.Service.LeaderboardService.GetHighScores(OpenXLive.Features.Leaderboard,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get the High Scores of Leaderboard
            </summary>
            <param name="sender"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LeaderboardService.GetHighScores(OpenXLive.Features.Leaderboard,OpenXLive.Features.ScoreTimeRange,System.Nullable{OpenXLive.Service.SortType},OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get the High Scores of Leaderboard
            </summary>
            <param name="leaderboard"></param>
            <param name="sort"></param>
            <param name="PageNumber"></param>
            <param name="PageSize"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LeaderboardService.GetFriendsScores(OpenXLive.Features.Leaderboard,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get the friends' Scores of the player
            </summary>
            <param name="sender"></param>
            <param name="player"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LeaderboardService.GetFriendsScores(OpenXLive.Features.Leaderboard,OpenXLive.Service.SortType,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get the friends' Scores of the player
            </summary>
            <param name="leaderboard"></param>
            <param name="player"></param>
            <param name="sort"></param>
            <param name="PageNumber"></param>
            <param name="PageSize"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LeaderboardService.GetFriendsScores(OpenXLive.Features.Leaderboard,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get the friends' Scores of the player
            </summary>
            <param name="sender"></param>
            <param name="Account"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LeaderboardService.GetFriendsScores(OpenXLive.Features.Leaderboard,System.String,OpenXLive.Service.SortType,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get the friends' Scores of the player
            </summary>
            <param name="leaderboard"></param>
            <param name="Account"></param>
            <param name="sort"></param>
            <param name="PageNumber"></param>
            <param name="PageSize"></param>
            <param name="EventHandler"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenXLive.Service.LeaderboardService.SubmitScore(OpenXLive.Features.Leaderboard,OpenXLive.Features.GameSession,OpenXLive.Features.Score,OpenXLive.Features.AsyncEventHandler)" -->
        <member name="M:OpenXLive.Service.LeaderboardService.ParseGetHighScores(OpenXLive.Features.Leaderboard,System.Xml.Linq.XElement)">
            <summary>
            Parse get high scores result.
            </summary>
            <param name="leaderboard"></param>
            <param name="root"></param>
        </member>
        <member name="M:OpenXLive.Service.LeaderboardService.ParseGetFriendsScores(OpenXLive.Features.Leaderboard,System.Xml.Linq.XElement)">
            <summary>
            Parse get friends score result.
            </summary>
            <param name="leaderboard"></param>
            <param name="root"></param>
        </member>
        <member name="M:OpenXLive.Service.LeaderboardService.ParseMyScoreElement(OpenXLive.Features.LeaderboardType,System.Xml.Linq.XElement)">
            <summary>
            Parse my score element.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.LogonService.CreateGameSession(OpenXLive.Features.GameSession,System.String)">
            <summary>
            Create game session, Call by XLiveGameManager.
            </summary>
            <param name="session"></param>
            <param name="SecretKey"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.CreateGameSession(OpenXLive.Features.GameSession,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Create game session, Call by XLiveGameManager.
            </summary>
            <param name="session"></param>
            <param name="SecretKey"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.CloseGameSession(OpenXLive.Features.GameSession)">
            <summary>
            Close game session.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.CloseGameSession(OpenXLive.Features.GameSession,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Close game session.
            </summary>
            <param name="session"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.QuerySession(OpenXLive.Features.GameSession)">
            <summary>
            Query Game Session states.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.QuerySession(OpenXLive.Features.GameSession,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Query Game Session states.
            </summary>
            <param name="session"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.PlayerLogon(OpenXLive.Features.MyPlayer)">
            <summary>
            Player Logon.
            </summary>
            <param name="player"></param>
            <param name="GameSession"></param>
            <param name="AccountName"></param>
            <param name="Password"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.PlayerLogon(OpenXLive.Features.MyPlayer,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Player Logon.
            </summary>
            <param name="player"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.PlayerLogon(OpenXLive.Features.MyPlayer,System.Boolean,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Player Logon.
            </summary>
            <param name="player"></param>
            <param name="isLoginSameDevice">Whether use the same account on the same device.</param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.PlayerLogoff(OpenXLive.Features.MyPlayer)">
            <summary>
            Player logoff.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.PlayerLogoff(OpenXLive.Features.MyPlayer,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Player logoff.
            </summary>
            <param name="player"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.CreateNewAccount(OpenXLive.Features.MyPlayer,System.String,System.String,System.String)">
            <summary>
            Create new account and use account player logon.
            </summary>
            <param name="player"></param>
            <param name="AccountName"></param>
            <param name="Password"></param>
            <param name="TitleName"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.CreateNewAccount(OpenXLive.Features.MyPlayer,System.String,System.String,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Create new account and use account player logon.
            </summary>
            <param name="player"></param>
            <param name="AccountName"></param>
            <param name="Password"></param>
            <param name="TitleName"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.RegisterNotificationUri(OpenXLive.Features.GameSession,System.String,System.String,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Register Push Notification Uri to OpenXLive Hosting Server
            </summary>
            <param name="session"></param>
            <param name="secret_key"></param>
            <param name="ChannelUri"></param>
            <param name="DeviceID"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.ParseGameSessionElement(OpenXLive.Features.GameSession,System.Xml.Linq.XElement)">
            <summary>
            Parse game session element.
            </summary>
            <param name="session"></param>
            <param name="gameSessionElement"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.ParseOwnerElementInSession(OpenXLive.Features.MyPlayer,System.Xml.Linq.XElement)">
            <summary>
            Parse owner element.
            </summary>
            <param name="player"></param>
            <param name="ownerElement"></param>
        </member>
        <member name="M:OpenXLive.Service.LogonService.ParseGameElement(System.Xml.Linq.XElement)">
            <summary>
            Parse owner element.
            </summary>
            <param name="gameElement"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.LogonService.ParseLeaderboardsElement(System.Xml.Linq.XElement)">
            <summary>
            Parse leaderboards element.
            </summary>
            <param name="leaderboardsElement"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.LogonService.ParseCreateSession(OpenXLive.Features.AsyncProcessResult@,OpenXLive.Features.GameSession,System.String)">
            <summary>
            Parse create session result.
            </summary>
            <param name="result"></param>
            <param name="session"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.LogonService.ParseCloseSession(OpenXLive.Features.AsyncProcessResult@,OpenXLive.Features.GameSession,System.String)">
            <summary>
            Parse close session result.
            </summary>
            <param name="result"></param>
            <param name="session"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.LogonService.ParseQuerySession(OpenXLive.Features.AsyncProcessResult@,OpenXLive.Features.GameSession,System.String)">
            <summary>
            Parse query session result.
            </summary>
            <param name="result"></param>
            <param name="session"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.LogonService.ParseLogonAndCreateAccount(OpenXLive.Features.AsyncProcessResult@,OpenXLive.Features.MyPlayer,System.String)">
            <summary>
            Parse logon and create account result.
            </summary>
            <param name="result"></param>
            <param name="player"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.LogonService.ParseLogoff(OpenXLive.Features.AsyncProcessResult@,OpenXLive.Features.MyPlayer,System.String)">
            <summary>
            Parse logoff result.
            </summary>
            <param name="result"></param>
            <param name="player"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.NotificationService.GetList(OpenXLive.Features.Notification,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="notification"></param>
            <param name="handler"></param>
            <exception cref="T:System.ArgumentNullException">notification is null.</exception>
        </member>
        <member name="M:OpenXLive.Service.NotificationService.Reset(OpenXLive.Features.NotificationItem,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="notification"></param>
            <param name="item"></param>
            <param name="handler"></param>
            <exception cref="T:System.ArgumentNullException">item is null.</exception>
        </member>
        <member name="T:OpenXLive.Service.PlayerService">
            <summary>
            Provide service of Player
            </summary>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.Search(OpenXLive.Features.PlayerSearch,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Search player with specifies keword.
            </summary>
            <param name="playerSearch"></param>
            <param name="keyword">keyword.</param>
            <param name="EventHandler"></param>
            <exception cref="T:System.NullReferenceException">search is null.</exception>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.GetProfile(OpenXLive.Features.MyPlayer,OpenXLive.Features.Player)">
            <summary>
            Gets the Player's profile
            </summary>
            <param name="Owner">The instance of current player</param>
            <param name="player">The instance of you want to know</param>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.GetProfile(OpenXLive.Features.MyPlayer,OpenXLive.Features.Player,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Gets the profile of player
            </summary>
            <param name="Owner">The instance of current player</param>
            <param name="player">The instance of you want to know</param>
            <param name="EventHandler">The event handler of complete event</param>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.GetMyScores(OpenXLive.Features.Player,System.String)">
            <summary>
            Gets the all scores of player in a game
            </summary>
            <param name="player">The instance of you want to know</param>
            <param name="GameId">The specified game ID</param>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.GetMyScores(OpenXLive.Features.Player,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Gets the all scores of player in a game session
            </summary>
            <param name="player">The instance of you want to know</param>
            <param name="GameId">The specified game ID</param>
            <param name="EventHandler">The event handler of complete event</param>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.GetMyGames(OpenXLive.Features.Player,System.Int32,System.Int32,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <param name="EventHandler"></param>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.GetFriends(OpenXLive.Features.Player,OpenXLive.Features.FollowState,System.Int32,System.Int32,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.UploadLocation(OpenXLive.Features.MyPlayer,OpenXLive.Features.XLocation)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <param name="location"></param>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.UploadLocation(OpenXLive.Features.MyPlayer,OpenXLive.Features.XLocation,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <param name="location"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.GetLocation(OpenXLive.Features.MyPlayer,System.String)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <param name="PlayerId"></param>
        </member>
        <member name="M:OpenXLive.Service.PlayerService.GetLocation(OpenXLive.Features.MyPlayer,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <param name="PlayerId"></param>
            <param name="EventHandler"></param>
        </member>
        <member name="T:OpenXLive.Service.SocialService">
            <summary>
            sns service
            </summary>
        </member>
        <member name="M:OpenXLive.Service.SocialService.GetSocialProviders(OpenXLive.Features.GameSession,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get sns list
            </summary>
            <param name="gameSession"></param>
            <param name="eventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.SocialService.GetSocialLoginResult(OpenXLive.Features.MyPlayer,System.String,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Get sns login result
            </summary>
            <param name="player"></param>
            <param name="loginToken"></param>
            <param name="eventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.SocialService.ParseXMLGetProviders(OpenXLive.Service.XLiveTransport,System.Object)">
            <summary>
            parse sns provider list
            </summary>
            <param name="Transport"></param>
            <param name="Target"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.SocialService.ParseProviders(OpenXLive.Features.GameSession,OpenXLive.Features.MyPlayer,System.Xml.Linq.XElement)">
            <summary>
            Parse sns providers element.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:OpenXLive.Service.SocialService.ParseXMLGetSocialLoginResult(OpenXLive.Service.XLiveTransport,System.Object)">
            <summary>
            authenticate sns login
            </summary>
            <param name="Transport"></param>
            <param name="Target"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.SocialService.SocialUpdateStatus(OpenXLive.Features.MyStatus,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Share content and picture
            </summary>
            <param name="status"></param>
            <param name="eventHandler"></param>
        </member>
        <member name="M:OpenXLive.Service.SocialService.ParseXMLSocialUpdateStatus(OpenXLive.Service.XLiveTransport,System.Object)">
            <summary>
            parse sns sns updateStatus result
            </summary>
            <param name="Transport"></param>
            <param name="Target"></param>
            <returns></returns>
        </member>
        <member name="M:OpenXLive.Service.TaskService.GetActivatedList(OpenXLive.Features.Task,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="handler"></param>
            <exception cref="T:System.ArgumentNullException">task is null.</exception>
        </member>
        <member name="M:OpenXLive.Service.TaskService.GetFinalizedList(OpenXLive.Features.Task,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="handler"></param>
            <exception cref="T:System.ArgumentNullException">task is null.</exception>
        </member>
        <member name="T:OpenXLive.Service.TimeService">
            <summary>
            Provider a service to get UTC time.
            </summary>
        </member>
        <member name="M:OpenXLive.Service.TimeService.GetUtcTime(OpenXLive.Features.TimeSynchronization,OpenXLive.Features.AsyncEventHandler)">
            <summary>
            Gets UTC time.
            </summary>
            <param name="timeSync"></param>
            <param name="eventHandler"></param>
            <exception cref="T:System.ArgumentNullException">timeSync is null.</exception>
        </member>
        <member name="P:OpenXLive.XImage.AutoDownload">
            <summary>
            Gets or sets a valuet indicates whether download image automatically.
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.LogonService">
            <summary>
            Gets the Logon service instance
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.LeaderboardService">
            <summary>
            Gets the Leaderboard service instance
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.GameService">
            <summary>
            Gets the Game service instance
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.AchievementService">
            <summary>
            Gets the Achievement service instance
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.PlayerService">
            <summary>
            Gets the Player service instance
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.FriendsService">
            <summary>
            Gets the FriendsService instance
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.AnnouncementService">
            <summary>
            Gets the AnnouncementService instance
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.SocialService">
            <summary>
            Get the SocialService instance
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.TimeService">
            <summary>
            Get the TimeService instance
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.NotificationService">
            <summary>
            Gets the NotificationService instance.
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.TaskService">
            <summary>
            Gets the NotificationService instance.
            </summary>
        </member>
        <member name="P:OpenXLive.Service.XLiveServiceManager.PromotionService">
            <summary>
            Gets the PromotionService instance.
            </summary>
        </member>
        <member name="M:OpenXLive.CryptManager.CreateHash(System.String,System.String,System.Byte[])">
            <summary>
            Generates a hash for the given plain text value and returns a
            base64-encoded result. Before the hash is computed, a random salt
            is generated and appended to the plain text. This salt is stored at
            the end of the hash value, so it can be used later for hash
            verification.
            </summary>
            <param name="plainText">
            Plaintext value to be hashed. The function does not check whether
            this parameter is null.
            </param>
            <param name="hashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1",
            "SHA256", "SHA384", and "SHA512" (if any other value is specified
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="saltBytes">
            Salt bytes. This parameter can be null, in which case a random salt
            value will be generated.
            </param>
            <returns>
            Hash value formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:OpenXLive.CryptManager.VerifyHash(System.String,System.String,System.String)">
            <summary>
            Compares a hash of the specified plain text value to a given hash
            value. Plain text is hashed with the same salt value as the original
            hash.
            </summary>
            <param name="plainText">
            Plain text to be verified against the specified hash. The function
            does not check whether this parameter is null.
            </param>
            <param name="hashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1", 
            "SHA256", "SHA384", and "SHA512" (if any other value is specified,
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="hashValue">
            Base64-encoded hash value produced by ComputeHash function. This value
            includes the original salt appended to it.
            </param>
            <returns>
            If computed hash mathes the specified hash the function the return
            value is true; otherwise, the function returns false.
            </returns>
        </member>
        <member name="M:OpenXLive.CryptManager.AddSalt(System.Byte[])">
            <summary>
            Adds an array of randomly generated bytes at the beginning of the
            array holding original plain text value.
            </summary>
            <param name="plainTextBytes">
            Byte array containing original plain text value.
            </param>
            <returns>
            Either original array of plain text bytes (if salt is not used) or a
            modified array containing a randomly generated salt added at the 
            beginning of the plain text bytes. 
            </returns>
        </member>
        <member name="M:OpenXLive.CryptManager.GenerateSalt">
            <summary>
            Generates an array holding cryptographically strong bytes.
            </summary>
            <returns>
            Array of randomly generated bytes.
            </returns>
            <remarks>
            Salt size will be defined at random or exactly as specified by the
            minSlatLen and maxSaltLen parameters passed to the object constructor.
            The first four bytes of the salt array will contain the salt length
            split into four two-bit pieces.
            </remarks>
        </member>
        <member name="M:OpenXLive.CryptManager.GenerateRandomNumber(System.Int32,System.Int32)">
            <summary>
            Generates random integer.
            </summary>
            <param name="minValue">
            Min value (inclusive).
            </param>
            <param name="maxValue">
            Max value (inclusive).
            </param>
            <returns>
            Random integer value between the min and max values (inclusive).
            </returns>
            <remarks>
            This methods overcomes the limitations of .NET Framework's Random
            class, which - when initialized multiple times within a very short
            period of time - can generate the same "random" number.
            </remarks>
        </member>
        <member name="P:OpenXLive.Global.Settings">
            <summary>
            Read / write application settings.
            </summary>
        </member>
        <member name="T:OpenXLive.Settings">
            <summary>
            Read / write app.config settings file.
            </summary>
        </member>
        <member name="M:OpenXLive.Settings.#ctor">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="M:OpenXLive.Settings.#ctor(System.String[0:,0:])">
             <summary>
             Constructor. Pass in an array of default values.
             Sample usage that passes in default values:
            
            		string[,] values = 
            		{
            			{"Name", "Live Oak"},
            			{"LogEvents", "True"}
            		}
            
            		Settings settings = new Settings(values);
            
             </summary>
        </member>
        <member name="M:OpenXLive.Settings.SetValue(System.String,System.Object)">
            <summary>
            Set setting value. Update underlying file if AutoUpdate is true.
            </summary>
        </member>
        <member name="M:OpenXLive.Settings.GetString(System.String)">
            <summary>
            Return specified settings as string.
            </summary>
        </member>
        <member name="M:OpenXLive.Settings.GetInt(System.String)">
            <summary>
            Return specified settings as integer.
            </summary>
        </member>
        <member name="M:OpenXLive.Settings.GetBool(System.String)">
            <summary>
            Return specified settings as boolean.
            </summary>
        </member>
        <member name="M:OpenXLive.Settings.Read">
            <summary>
            Read settings file.
            </summary>
        </member>
        <member name="M:OpenXLive.Settings.Write">
            <summary>
            Write settings to file.
            </summary>
        </member>
        <member name="M:OpenXLive.Settings.GetFilePath">
            <summary>
            Return full path to settings file. Appends .config to the assembly name.
            </summary>
        </member>
        <member name="P:OpenXLive.Settings.AutoWrite">
            <summary>
            Specifies if the settings file is updated whenever a value 
            is set. If false, you need to call Write to update the 
            underlying settings file.
            </summary>
        </member>
        <member name="P:OpenXLive.Settings.FilePath">
            <summary>
            Full path to settings file.
            </summary>
        </member>
        <member name="T:OpenXLive.SettingKeys">
            <summary>
            Contains setting key names.
            </summary>
        </member>
        <member name="T:OpenXLive.SettingDefaults">
            <summary>
            Default settings
            </summary>
        </member>
    </members>
</doc>
